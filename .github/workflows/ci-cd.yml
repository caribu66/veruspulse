name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'

jobs:
  # Job 1: Lint & Format Check
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check formatting
        run: npm run format:check || echo "Formatting check not configured"

  # Job 2: TypeScript Type Check
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compiler
        run: npx tsc --noEmit

  # Job 3: Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --coverage || echo "Tests not configured yet"

      - name: Upload coverage
        if: success()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Job 4: Build
  build:
    name: Build Next.js App
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          # Use dummy values for build-time checks
          VERUS_RPC_HOST: http://localhost:18843
          VERUS_RPC_USER: verus
          VERUS_RPC_PASSWORD: dummy

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next
          retention-days: 1

  # Job 5: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run npm audit
        run: npm audit --audit-level=high || echo "Vulnerabilities found, review required"

      - name: Run Snyk security scan
        if: ${{ env.SNYK_TOKEN != '' }}
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Job 6: Deploy to Production (Self-Hosted)
  deploy-production:
    name: Deploy to Production
    runs-on: self-hosted
    needs: [lint, typecheck, test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://www.veruspulse.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci --production

      - name: Create .env file
        run: |
          cat > .env << EOF
          # VerusCoin Daemon Configuration
          VERUS_RPC_HOST=${{ secrets.PROD_VERUS_RPC_HOST }}
          VERUS_RPC_USER=${{ secrets.PROD_VERUS_RPC_USER }}
          VERUS_RPC_PASSWORD=${{ secrets.PROD_VERUS_RPC_PASSWORD }}
          VERUS_RPC_TIMEOUT=15000

          # ZMQ Configuration
          VERUS_ZMQ_ADDRESS=tcp://127.0.0.1:28332
          ENABLE_ZMQ=true

          # PostgreSQL
          DATABASE_URL=${{ secrets.DATABASE_URL }}

          # VerusID Service
          SERVICE_PORT=4001
          SYNC_INTERVAL_MS=120000
          NEXT_PUBLIC_VERUSID_SERVICE_URL=http://localhost:4001
          VERUSID_SERVICE_URL=http://localhost:4001

          # Application
          NODE_ENV=production
          NEXT_PUBLIC_APP_URL=https://www.veruspulse.com

          # Rate limiting
          RATE_LIMIT_WINDOW_MS=900000
          RATE_LIMIT_MAX_REQUESTS=200

          # PostgreSQL pool
          PG_POOL_MAX=10

          # Security
          JWT_SECRET=${{ secrets.JWT_SECRET }}

          # Cache Configuration
          CACHE_TTL_BLOCKCHAIN=30
          CACHE_TTL_BLOCK=300
          CACHE_TTL_TRANSACTION=120
          CACHE_TTL_ADDRESS=60
          CACHE_TTL_MEMPOOL=10

          # Performance
          ENABLE_CACHE=true
          ENABLE_RATE_LIMITING=true
          ENABLE_COMPRESSION=true
          ENABLE_PERFORMANCE_MONITORING=true
          EOF

      - name: Build application
        run: npm run build

      - name: Restart PM2 service
        run: |
          pm2 restart veruspulse || pm2 start npm --name "veruspulse" -- start
          pm2 save

      - name: Health check
        run: |
          sleep 5
          curl -f http://localhost:3000 || exit 1

      - name: Deployment notification
        run: |
          echo "✅ Deployment successful!"
          echo "🌐 URL: https://www.veruspulse.com"
          echo "📦 Commit: ${{ github.sha }}"

  # Job 7: Deploy to Staging (Self-Hosted)
  deploy-staging:
    name: Deploy to Staging
    runs-on: self-hosted
    needs: [lint, typecheck, test, build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Create .env file
        run: |
          cat > .env << EOF
          VERUS_RPC_HOST=${{ secrets.STAGING_VERUS_RPC_HOST }}
          VERUS_RPC_USER=${{ secrets.STAGING_VERUS_RPC_USER }}
          VERUS_RPC_PASSWORD=${{ secrets.STAGING_VERUS_RPC_PASSWORD }}
          NODE_ENV=development
          EOF

      - name: Build application
        run: npm run build

      - name: Restart staging service
        run: |
          pm2 restart veruspulse-staging || pm2 start npm --name "veruspulse-staging" -- run dev -- -p 3001
          pm2 save

      - name: Staging deployment notification
        run: |
          echo "✅ Staging deployment successful!"
          echo "📦 Commit: ${{ github.sha }}"
